arma_2_2 <- sarima(Xt.ts, 2, 1, 2)
arma_3_0 <- sarima(Xt.ts, 3, 1, 0)
arma_3_1 <- sarima(Xt.ts, 3, 1, 1)
arma_3_2 <- sarima(Xt.ts, 3, 1, 2)
arma_4_0 <- sarima(Xt.ts, 4, 1, 0)
arma_4_1 <- sarima(Xt.ts, 4, 1, 1)
arma_4_2 <- sarima(Xt.ts, 4, 1, 2)
arma_5_0 <- sarima(Xt.ts, 5, 1, 0)
arma_5_1 <- sarima(Xt.ts, 5, 1, 1)
arma_5_2 <- sarima(Xt.ts, 5, 1, 2)
models_list
pmax <- 5
qmax <- 2
models_list <- list()
for (p in 0:pmax) {
for (q in 0:qmax) {
model_name <- paste0("arma_", p, "_", q)
models_list[[model_name]] <- sarima(Xt.ts, p, 1, q)
}
}
models_list
models_list
models_list
arma_0_0$ttable
#we call the differents models arma_p_q
#==============================================================================#
# We test all ARIMA(p,1,q) models for the construction series Xt.ts,
# where p ≤ 5 and q ≤ 2. We compute AIC and BIC for each combination.
#==============================================================================#
arma_0_1 <- sarima(Xt.ts, 0, 1, 1)
arma_0_2 <- sarima(Xt.ts, 0, 1, 2)
arma_1_0 <- sarima(Xt.ts, 1, 1, 0)
arma_1_1 <- sarima(Xt.ts, 1, 1, 1)
arma_1_2 <- sarima(Xt.ts, 1, 1, 2)
arma_2_0 <- sarima(Xt.ts, 2, 1, 0)
arma_2_1 <- sarima(Xt.ts, 2, 1, 1)
arma_2_2 <- sarima(Xt.ts, 2, 1, 2)
arma_3_0 <- sarima(Xt.ts, 3, 1, 0)
arma_3_1 <- sarima(Xt.ts, 3, 1, 1)
arma_3_2 <- sarima(Xt.ts, 3, 1, 2)
arma_4_0 <- sarima(Xt.ts, 4, 1, 0)
arma_4_1 <- sarima(Xt.ts, 4, 1, 1)
arma_4_2 <- sarima(Xt.ts, 4, 1, 2)
arma_5_0 <- sarima(Xt.ts, 5, 1, 0)
arma_5_1 <- sarima(Xt.ts, 5, 1, 1)
arma_5_2 <- sarima(Xt.ts, 5, 1, 2)
arma_0_1$ttable
arma_0_2$ttable
arma_1_0$ttable
arma_1_1$ttable
arma_1_2$ttable
arma_2_0$ttable
arma_2_1$ttable
arma_2_2$ttable
arma_3_0$ttable
arma_3_1$ttable
arma_3_2$ttable
arma_4_0$ttable
arma_4_1$ttable
arma_4_2$ttable
arma_5_0$ttable
arma_5_1$ttable
arma_5_2$ttable
pmax <- 5
qmax <- 2
models_list <- list()
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
# Apply Box.test() to the residuals of each model
for (m in names(models_list)) {
test <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(test$statistic),
BoxTest_pvalue = as.numeric(test$p.value)
))
}
# Display complete Ljung-Box test results
cat("\n====== Ljung-Box Test Results ======\n")
print(ljung_results)
# Display only models that pass the test (p-value > 0.05)
valid_models <- subset(ljung_results, BoxTest_pvalue > 0.05)
cat("\n====== Models Passing the Test (p > 0.05) ======\n")
print(valid_models)
models <- c("arma_0_0", "arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Ljung-Box test on residuals
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
for (m in names(models_list)) {
test <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(test$statistic),
BoxTest_pvalue = as.numeric(test$p.value)
))
}
# Print full Ljung-Box test results
cat("\n====== Ljung-Box Test Results ======\n")
print(ljung_results)
# Display only models that pass the Ljung-Box test
valid_models <- subset(ljung_results, BoxTest_pvalue > 0.05)
cat("\n====== Models Passing the Test (p-value > 0.05) ======\n")
#we call the differents models arma_p_q
#==============================================================================#
# We test all ARIMA(p,1,q) models for the construction series Xt.ts,
# where p ≤ 5 and q ≤ 2. We compute AIC and BIC for each combination.
#==============================================================================#
arma_0_1 <- sarima(Xt.ts, 0, 1, 1)
arma_0_2 <- sarima(Xt.ts, 0, 1, 2)
arma_1_0 <- sarima(Xt.ts, 1, 1, 0)
arma_1_1 <- sarima(Xt.ts, 1, 1, 1)
arma_1_2 <- sarima(Xt.ts, 1, 1, 2)
arma_2_0 <- sarima(Xt.ts, 2, 1, 0)
arma_2_1 <- sarima(Xt.ts, 2, 1, 1)
arma_2_2 <- sarima(Xt.ts, 2, 1, 2)
arma_3_0 <- sarima(Xt.ts, 3, 1, 0)
arma_3_1 <- sarima(Xt.ts, 3, 1, 1)
arma_3_2 <- sarima(Xt.ts, 3, 1, 2)
arma_4_0 <- sarima(Xt.ts, 4, 1, 0)
arma_4_1 <- sarima(Xt.ts, 4, 1, 1)
arma_4_2 <- sarima(Xt.ts, 4, 1, 2)
arma_5_0 <- sarima(Xt.ts, 5, 1, 0)
arma_5_1 <- sarima(Xt.ts, 5, 1, 1)
arma_5_2 <- sarima(Xt.ts, 5, 1, 2)
#==============================================================================#
# In order to eliminate first models, we exclude the models with at least
# 1 non signficative coefficient (Test H0 versus H1)
#==============================================================================#
arma_0_1$ttable
arma_0_2$ttable
arma_1_0$ttable
arma_1_1$ttable
arma_1_2$ttable # out
arma_2_0$ttable
arma_2_1$ttable # out
arma_2_2$ttable # out
arma_3_0$ttable
arma_3_1$ttable # out
arma_3_2$ttable # out
arma_4_0$ttable
arma_4_1$ttable # out
arma_4_2$ttable # out
arma_5_0$ttable
arma_5_1$ttable # out
arma_5_2$ttable # out
models <- c("arma_0_0", "arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Ljung-Box test on residuals
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
for (m in names(models_list)) {
test <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(test$statistic),
BoxTest_pvalue = as.numeric(test$p.value)
))
}
# Print full Ljung-Box test results
cat("\n====== Ljung-Box Test Results ======\n")
print(ljung_results)
# Display only models that pass the Ljung-Box test
valid_models <- subset(ljung_results, BoxTest_pvalue > 0.05)
cat("\n====== Models Passing the Test (p-value > 0.05) ======\n")
print(valid_models)
# Load necessary package
library(astsa)
#===============================#
# Step 1: Estimate ARIMA(p,1,q) models
#===============================#
models_list <- list(
arma_0_1 = sarima(Xt.ts, 0, 1, 1),
arma_0_2 = sarima(Xt.ts, 0, 1, 2),
arma_1_0 = sarima(Xt.ts, 1, 1, 0),
arma_1_1 = sarima(Xt.ts, 1, 1, 1),
arma_1_2 = sarima(Xt.ts, 1, 1, 2),
arma_2_0 = sarima(Xt.ts, 2, 1, 0),
arma_2_1 = sarima(Xt.ts, 2, 1, 1),
arma_2_2 = sarima(Xt.ts, 2, 1, 2),
arma_3_0 = sarima(Xt.ts, 3, 1, 0),
arma_3_1 = sarima(Xt.ts, 3, 1, 1),
arma_3_2 = sarima(Xt.ts, 3, 1, 2),
arma_4_0 = sarima(Xt.ts, 4, 1, 0),
arma_4_1 = sarima(Xt.ts, 4, 1, 1),
arma_4_2 = sarima(Xt.ts, 4, 1, 2),
arma_5_0 = sarima(Xt.ts, 5, 1, 0),
arma_5_1 = sarima(Xt.ts, 5, 1, 1),
arma_5_2 = sarima(Xt.ts, 5, 1, 2)
)
# Initialize a dataframe for Ljung-Box results
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
# List of models that satisfy all conditions
good_models <- c()
# Loop over each model
for (m in names(models_list)) {
# Extract ttable
ttable <- models_list[[m]]$ttable
# Remove rows where Estimate is NaN (if any)
ttable <- ttable[!is.nan(ttable[, "Estimate"]), ]
# Check if all coefficients (except constant) are significant (p-value < 0.05)
param_significant <- all(ttable[!grepl("constant", rownames(ttable)), "p.value"] < 0.05)
# Perform Ljung-Box test
ljung <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
# Store Ljung-Box result
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(ljung$statistic),
BoxTest_pvalue = as.numeric(ljung$p.value)
))
# Check conditions: all coefficients significant AND residuals pass Ljung-Box
if (param_significant && ljung$p.value > 0.05) {
good_models <- c(good_models, m)
}
}
# Full Ljung-Box results
cat("\n====== Ljung-Box Test Results ======\n")
print(ljung_results)
# Models that satisfy both conditions
cat("\n====== Selected Models (significant + Ljung-Box passed) ======\n")
print(good_models)
#===============================#
# Step 1: Estimate ARIMA(p,1,q) models
#===============================#
models_list <- list(
arma_0_1 = sarima(Xt.ts, 0, 1, 1),
arma_0_2 = sarima(Xt.ts, 0, 1, 2),
arma_1_0 = sarima(Xt.ts, 1, 1, 0),
arma_1_1 = sarima(Xt.ts, 1, 1, 1),
arma_1_2 = sarima(Xt.ts, 1, 1, 2),
arma_2_0 = sarima(Xt.ts, 2, 1, 0),
arma_2_1 = sarima(Xt.ts, 2, 1, 1),
arma_2_2 = sarima(Xt.ts, 2, 1, 2),
arma_3_0 = sarima(Xt.ts, 3, 1, 0),
arma_3_1 = sarima(Xt.ts, 3, 1, 1),
arma_3_2 = sarima(Xt.ts, 3, 1, 2),
arma_4_0 = sarima(Xt.ts, 4, 1, 0),
arma_4_1 = sarima(Xt.ts, 4, 1, 1),
arma_4_2 = sarima(Xt.ts, 4, 1, 2),
arma_5_0 = sarima(Xt.ts, 5, 1, 0),
arma_5_1 = sarima(Xt.ts, 5, 1, 1),
arma_5_2 = sarima(Xt.ts, 5, 1, 2)
)
# Initialize a dataframe for Ljung-Box results
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
# List of models that satisfy all conditions
good_models <- c()
# Loop over each model
for (m in names(models_list)) {
# Extract ttable
ttable <- models_list[[m]]$ttable
# Remove rows where Estimate is NaN (if any)
ttable <- ttable[!is.nan(ttable[, "Estimate"]), ]
# Check if all coefficients (except constant) are significant (p-value < 0.05)
param_significant <- all(ttable[!grepl("constant", rownames(ttable)), "p.value"] < 0.05)
# Perform Ljung-Box test
ljung <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
# Store Ljung-Box result
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(ljung$statistic),
BoxTest_pvalue = as.numeric(ljung$p.value)
))
# Check conditions: all coefficients significant AND residuals pass Ljung-Box
if (param_significant && ljung$p.value > 0.05) {
good_models <- c(good_models, m)
}
}
# Store Ljung-Box result
# Initialize a dataframe for Ljung-Box results
ljung_results <- data.frame(
Model = character(),
BoxTest_Statistic = numeric(),
BoxTest_pvalue = numeric(),
stringsAsFactors = FALSE
)
# List of models that satisfy all conditions
good_models <- c()
# Loop over each model
for (m in names(models_list)) {
# Extract ttable
ttable <- models_list[[m]]$ttable
# Remove rows where Estimate is NaN (if any)
ttable <- ttable[!is.nan(ttable[, "Estimate"]), ]
# Check if all coefficients (except constant) are significant (p-value < 0.05)
param_significant <- all(ttable[!grepl("constant", rownames(ttable)), "p.value"] < 0.05)
# Perform Ljung-Box test
ljung <- Box.test(residuals(models_list[[m]]$fit), lag = 10, type = "Ljung-Box")
# Store Ljung-Box result
ljung_results <- rbind(ljung_results, data.frame(
Model = m,
BoxTest_Statistic = as.numeric(ljung$statistic),
BoxTest_pvalue = as.numeric(ljung$p.value)
))
# Safely check conditions
if (!is.na(ljung$p.value) && param_significant && ljung$p.value > 0.05) {
good_models <- c(good_models, m)
}
}
# Print full Ljung-Box results
cat("\n====== Ljung-Box Test Results ======\n")
print(ljung_results)
# Models that satisfy both conditions
cat("\n====== Selected Models (significant + Ljung-Box passed) ======\n")
print(good_models)
# List all model names
models <- c("arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Apply LjungBox() to each model
for (m in models) {
cat("\n--- Ljung-Box Test for", m, "---\n")
print(LjungBox(get(m)$fit))
}
# List all model names
models <- c("arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Loop over models and apply Box.test
for (m in models) {
cat("\n--- Ljung-Box Test for", m, "---\n")
print(Box.test(residuals(get(m)$fit), lag = 10, type = "Ljung-Box"))
}
#===============================#
# Step 2: Select models
#===============================#
models <- c("arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Loop over models and apply Box.test
for (m in models) {
cat("\n--- Ljung-Box Test for", m, "---\n")
print(Box.test(residuals(get(m)$fit), lag = 10, type = "Ljung-Box"))
}
#==============================================================================#
# We still keep the excluded models ("out models") to compute the Ljung-Box
# statistics on their residuals.
# We will later exclude models whose Ljung-Box p-value is less than 15%.
#==============================================================================#
models <- c("arma_0_1", "arma_0_2",
"arma_1_0", "arma_1_1", "arma_1_2",
"arma_2_0", "arma_2_1", "arma_2_2",
"arma_3_0", "arma_3_1", "arma_3_2",
"arma_4_0", "arma_4_1", "arma_4_2",
"arma_5_0", "arma_5_1", "arma_5_2")
# Loop over models and apply Box.test
for (m in models) {
cat("\n--- Ljung-Box Test for", m, "---\n")
print(Box.test(residuals(get(m)$fit), lag = 10, type = "Ljung-Box"))
}
info_criteria <- data.frame(
Model = character(),
AIC = numeric(),
BIC = numeric(),
stringsAsFactors = FALSE
)
# Loop over each model
for (m in models) {
fit <- get(m)$fit
model_aic <- AIC(fit)
model_bic <- BIC(fit)
info_criteria <- rbind(info_criteria, data.frame(
Model = m,
AIC = model_aic,
BIC = model_bic
))
}
# Display the table
print(info_criteria)
abber <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
install.packages("tsoutliers")
library(tsoutliers)
library(tsoutliers)
abber <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
abber
plot(abber)
abber <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
abber
plot(abber)
outlier_result <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
summary(outlier_result)
outlier_result$outliers
plot(abber)
outlier_result <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
summary(outlier_result)
outlier_result$outliers
plot(outlier_result)
# Charger les packages nécessaires
library(tsoutliers)
library(forecast)
# Étape 1 : estimer un ARIMA(1,1,1) sur la série Xt.ts
arima111 <- arima(Xt.ts, order = c(1, 1, 1))
# Étape 2 : détecter les outliers avec une valeur critique de 5
outliers_res <- locate.outliers.oloop(
y = Xt.ts,
xreg = NULL,
fit = arima111,
types = c("AO", "LS", "TC", "IO"),
cval = 5,
delta = 0.7
)
library(tsoutliers)
library(forecast)
# Étape 1 : estimer un ARIMA(1,1,1) sur la série Xt.ts
arima111 <- arima(Xt.ts, order = c(1, 1, 1))
# Étape 2 : détecter les valeurs aberrantes
res <- locate.outliers.oloop(
y = Xt.ts,
fit = arima111,
types = c("AO", "LS", "TC", "IO"),
cval = 5,
delta = 0.7
)
# Afficher les valeurs aberrantes détectées
print(res$outliers)
# Étape 3 : supprimer les outliers en masse et ajuster le modèle
model_out <- discard.outliers(
res,
y = Xt.ts,
method = "en-masse",
tsmethod.call = arima111$call,
cval = 5
)
# Outliers retenus dans le modèle final
print(model_out$outliers)
# Étape 4 : récupérer le modèle final sans outliers
final_model <- model_out$fit
# Afficher les coefficients du modèle final
print(coefficients(final_model))
# Optionnel : diagnostic des résidus
checkresiduals(final_model)
# Étape 1 : estimer un ARIMA(1,1,1) sur la série Xt.ts
arima111 <- arima(Xt.ts, order = c(1, 1, 1))
# Étape 2 : détecter les valeurs aberrantes
res <- locate.outliers.oloop(
y = Xt.ts,
fit = arima111,
types = c("AO", "LS", "TC", "IO"),
cval = 8,
delta = 0.7
)
# Afficher les valeurs aberrantes détectées
print(res$outliers)
# Étape 3 : supprimer les outliers en masse et ajuster le modèle
model_out <- discard.outliers(
res,
y = Xt.ts,
method = "en-masse",
tsmethod.call = arima111$call,
cval = 5
)
# Outliers retenus dans le modèle final
print(model_out$outliers)
# Étape 4 : récupérer le modèle final sans outliers
final_model <- model_out$fit
# Afficher les coefficients du modèle final
print(coefficients(final_model))
# Optionnel : diagnostic des résidus
checkresiduals(final_model)
outlier_result <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
summary(outlier_result)
outlier_result$outliers
plot(outlier_result)
outlier_result <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
summary(outlier_result)
outlier_result$outliers
plot(outlier_result)
outlier_result <- tso(Xt.ts, types = c("AO", "LS", "TC","IO"))
summary(outlier_result)
outlier_result$outliers
png("outliers_plot.png", width = 800, height = 600)
plot(outlier_result)
dev.off()
